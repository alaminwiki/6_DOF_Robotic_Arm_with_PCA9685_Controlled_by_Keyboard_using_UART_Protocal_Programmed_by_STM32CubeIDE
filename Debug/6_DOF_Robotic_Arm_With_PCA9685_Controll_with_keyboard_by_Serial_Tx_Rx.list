
6_DOF_Robotic_Arm_With_PCA9685_Controll_with_keyboard_by_Serial_Tx_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041a8  080041a8  000051a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d4  080041d4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d8  080041d8  000051d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  080041e8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080041e8  000060d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009da2  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001894  00000000  00000000  0000fdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00011670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000767  00000000  00000000  00011fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001642f  00000000  00000000  0001273f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c063  00000000  00000000  00028b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080ccc  00000000  00000000  00034bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b589d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000b58e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004190 	.word	0x08004190

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004190 	.word	0x08004190

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_f2uiz>:
 8000ba8:	0042      	lsls	r2, r0, #1
 8000baa:	d20e      	bcs.n	8000bca <__aeabi_f2uiz+0x22>
 8000bac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bb0:	d30b      	bcc.n	8000bca <__aeabi_f2uiz+0x22>
 8000bb2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bba:	d409      	bmi.n	8000bd0 <__aeabi_f2uiz+0x28>
 8000bbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr
 8000bd0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bd4:	d101      	bne.n	8000bda <__aeabi_f2uiz+0x32>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d102      	bne.n	8000be0 <__aeabi_f2uiz+0x38>
 8000bda:	f04f 30ff 	mov.w	r0, #4294967295
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    if (huart->Instance==USART1) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <HAL_UART_RxCpltCallback+0x24>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d104      	bne.n	8000c04 <HAL_UART_RxCpltCallback+0x1c>
        HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4904      	ldr	r1, [pc, #16]	@ (8000c10 <HAL_UART_RxCpltCallback+0x28>)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_UART_RxCpltCallback+0x2c>)
 8000c00:	f002 fd62 	bl	80036c8 <HAL_UART_Receive_IT>
    }
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	200000c4 	.word	0x200000c4
 8000c14:	2000007c 	.word	0x2000007c

08000c18 <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	460b      	mov	r3, r1
 8000c24:	71bb      	strb	r3, [r7, #6]
 8000c26:	4613      	mov	r3, r2
 8000c28:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	230a      	movs	r3, #10
 8000c30:	9302      	str	r3, [sp, #8]
 8000c32:	2301      	movs	r3, #1
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	f107 030f 	add.w	r3, r7, #15
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	4819      	ldr	r0, [pc, #100]	@ (8000ca8 <PCA9685_SetBit+0x90>)
 8000c42:	f001 fab9 	bl	80021b8 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10d      	bne.n	8000c68 <PCA9685_SetBit+0x50>
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e00a      	b.n	8000c7e <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	b25a      	sxtb	r2, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	230a      	movs	r3, #10
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2301      	movs	r3, #1
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f107 030f 	add.w	r3, r7, #15
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	2180      	movs	r1, #128	@ 0x80
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <PCA9685_SetBit+0x90>)
 8000c96:	f001 f995 	bl	8001fc4 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fcce 	bl	800163c <HAL_Delay>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000028 	.word	0x20000028

08000cac <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d902      	bls.n	8000cc6 <PCA9685_SetPWMFrequency+0x1a>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e00c      	b.n	8000ce0 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	2b18      	cmp	r3, #24
 8000cca:	d802      	bhi.n	8000cd2 <PCA9685_SetPWMFrequency+0x26>
 8000ccc:	23ff      	movs	r3, #255	@ 0xff
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e006      	b.n	8000ce0 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	031b      	lsls	r3, r3, #12
 8000cd6:	4a12      	ldr	r2, [pc, #72]	@ (8000d20 <PCA9685_SetPWMFrequency+0x74>)
 8000cd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff ff97 	bl	8000c18 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000cea:	230a      	movs	r3, #10
 8000cec:	9302      	str	r3, [sp, #8]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	f107 030f 	add.w	r3, r7, #15
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	22fe      	movs	r2, #254	@ 0xfe
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <PCA9685_SetPWMFrequency+0x78>)
 8000d00:	f001 f960 	bl	8001fc4 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2104      	movs	r1, #4
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ff85 	bl	8000c18 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2107      	movs	r1, #7
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff ff80 	bl	8000c18 <PCA9685_SetBit>
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	017d7840 	.word	0x017d7840
 8000d24:	20000028 	.word	0x20000028

08000d28 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffb9 	bl	8000cac <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff6a 	bl	8000c18 <PCA9685_SetBit>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	460b      	mov	r3, r1
 8000d58:	80bb      	strh	r3, [r7, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	3306      	adds	r3, #6
 8000d66:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000d68:	88bb      	ldrh	r3, [r7, #4]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	2304      	movs	r3, #4
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2180      	movs	r1, #128	@ 0x80
 8000d9e:	4803      	ldr	r0, [pc, #12]	@ (8000dac <PCA9685_SetPWM+0x60>)
 8000da0:	f001 f910 	bl	8001fc4 <HAL_I2C_Mem_Write>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000028 	.word	0x20000028

08000db0 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000dbc:	6838      	ldr	r0, [r7, #0]
 8000dbe:	f7ff fb2b 	bl	8000418 <__aeabi_f2d>
 8000dc2:	a317      	add	r3, pc, #92	@ (adr r3, 8000e20 <PCA9685_SetServoAngle+0x70>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fb7e 	bl	80004c8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <PCA9685_SetServoAngle+0x80>)
 8000dda:	f7ff fc9f 	bl	800071c <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	a310      	add	r3, pc, #64	@ (adr r3, 8000e28 <PCA9685_SetServoAngle+0x78>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff f9b6 	bl	800015c <__adddf3>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fd78 	bl	80008ec <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff fed1 	bl	8000ba8 <__aeabi_f2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff9c 	bl	8000d4c <PCA9685_SetPWM>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	f3af 8000 	nop.w
 8000e20:	00000000 	.word	0x00000000
 8000e24:	40799800 	.word	0x40799800
 8000e28:	9999999a 	.word	0x9999999a
 8000e2c:	40599999 	.word	0x40599999
 8000e30:	40668000 	.word	0x40668000

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e38:	f000 fb9e 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f97a 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 fa16 	bl	8001270 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e44:	f000 f9ea 	bl	800121c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e48:	f000 f9ba 	bl	80011c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	49b1      	ldr	r1, [pc, #708]	@ (8001114 <main+0x2e0>)
 8000e50:	48b1      	ldr	r0, [pc, #708]	@ (8001118 <main+0x2e4>)
 8000e52:	f002 fc39 	bl	80036c8 <HAL_UART_Receive_IT>
  PCA9685_Init(50); // 50Hz for servo
 8000e56:	2032      	movs	r0, #50	@ 0x32
 8000e58:	f7ff ff66 	bl	8000d28 <PCA9685_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
                     PCA9685_SetServoAngle(3, 0);
 8000e5c:	f04f 0100 	mov.w	r1, #0
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff ffa5 	bl	8000db0 <PCA9685_SetServoAngle>
    	      	     PCA9685_SetServoAngle(4, 0);
 8000e66:	f04f 0100 	mov.w	r1, #0
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f7ff ffa0 	bl	8000db0 <PCA9685_SetServoAngle>
    	      	     PCA9685_SetServoAngle(6, 0);
 8000e70:	f04f 0100 	mov.w	r1, #0
 8000e74:	2006      	movs	r0, #6
 8000e76:	f7ff ff9b 	bl	8000db0 <PCA9685_SetServoAngle>

                     PCA9685_SetServoAngle(8, 0);
 8000e7a:	f04f 0100 	mov.w	r1, #0
 8000e7e:	2008      	movs	r0, #8
 8000e80:	f7ff ff96 	bl	8000db0 <PCA9685_SetServoAngle>
  	      	    	 PCA9685_SetServoAngle(10, 0);
 8000e84:	f04f 0100 	mov.w	r1, #0
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f7ff ff91 	bl	8000db0 <PCA9685_SetServoAngle>
  	      	    	 PCA9685_SetServoAngle(13, 0);
 8000e8e:	f04f 0100 	mov.w	r1, #0
 8000e92:	200d      	movs	r0, #13
 8000e94:	f7ff ff8c 	bl	8000db0 <PCA9685_SetServoAngle>

  while (1)
  {


	      if(RX1_Char == '1')
 8000e98:	4b9e      	ldr	r3, [pc, #632]	@ (8001114 <main+0x2e0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b31      	cmp	r3, #49	@ 0x31
 8000e9e:	d114      	bne.n	8000eca <main+0x96>
	      {  a++;
 8000ea0:	4b9e      	ldr	r3, [pc, #632]	@ (800111c <main+0x2e8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b9c      	ldr	r3, [pc, #624]	@ (800111c <main+0x2e8>)
 8000eaa:	701a      	strb	r2, [r3, #0]

	    	  PCA9685_SetServoAngle(3, a*10);
 8000eac:	4b9b      	ldr	r3, [pc, #620]	@ (800111c <main+0x2e8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe20 	bl	8000b00 <__aeabi_i2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f7ff ff73 	bl	8000db0 <PCA9685_SetServoAngle>
	      }
	      if(RX1_Char == '2')
 8000eca:	4b92      	ldr	r3, [pc, #584]	@ (8001114 <main+0x2e0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b32      	cmp	r3, #50	@ 0x32
 8000ed0:	d114      	bne.n	8000efc <main+0xc8>
	      {

	    	  a--;
 8000ed2:	4b92      	ldr	r3, [pc, #584]	@ (800111c <main+0x2e8>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b90      	ldr	r3, [pc, #576]	@ (800111c <main+0x2e8>)
 8000edc:	701a      	strb	r2, [r3, #0]
	    	  PCA9685_SetServoAngle(3, a*10);
 8000ede:	4b8f      	ldr	r3, [pc, #572]	@ (800111c <main+0x2e8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe07 	bl	8000b00 <__aeabi_i2f>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f7ff ff5a 	bl	8000db0 <PCA9685_SetServoAngle>
	      }
	      HAL_Delay(10);
 8000efc:	200a      	movs	r0, #10
 8000efe:	f000 fb9d 	bl	800163c <HAL_Delay>
	      if(RX1_Char == '4')
 8000f02:	4b84      	ldr	r3, [pc, #528]	@ (8001114 <main+0x2e0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b34      	cmp	r3, #52	@ 0x34
 8000f08:	d114      	bne.n	8000f34 <main+0x100>
	      	      {
	    	         b++;
 8000f0a:	4b85      	ldr	r3, [pc, #532]	@ (8001120 <main+0x2ec>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b83      	ldr	r3, [pc, #524]	@ (8001120 <main+0x2ec>)
 8000f14:	701a      	strb	r2, [r3, #0]

	      	    	  PCA9685_SetServoAngle(4, b*10);
 8000f16:	4b82      	ldr	r3, [pc, #520]	@ (8001120 <main+0x2ec>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fdeb 	bl	8000b00 <__aeabi_i2f>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f7ff ff3e 	bl	8000db0 <PCA9685_SetServoAngle>

	      	      }
	      	      if(RX1_Char == '3')
 8000f34:	4b77      	ldr	r3, [pc, #476]	@ (8001114 <main+0x2e0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b33      	cmp	r3, #51	@ 0x33
 8000f3a:	d114      	bne.n	8000f66 <main+0x132>
	      	      {

	      	    	  b--;
 8000f3c:	4b78      	ldr	r3, [pc, #480]	@ (8001120 <main+0x2ec>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b76      	ldr	r3, [pc, #472]	@ (8001120 <main+0x2ec>)
 8000f46:	701a      	strb	r2, [r3, #0]
	      	    	  PCA9685_SetServoAngle(4, b*10);
 8000f48:	4b75      	ldr	r3, [pc, #468]	@ (8001120 <main+0x2ec>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fdd2 	bl	8000b00 <__aeabi_i2f>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff ff25 	bl	8000db0 <PCA9685_SetServoAngle>

	      	      }
	      	      HAL_Delay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f000 fb68 	bl	800163c <HAL_Delay>
	      	    if(RX1_Char == '5')
 8000f6c:	4b69      	ldr	r3, [pc, #420]	@ (8001114 <main+0x2e0>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b35      	cmp	r3, #53	@ 0x35
 8000f72:	d114      	bne.n	8000f9e <main+0x16a>
	      	    	      {   c++;
 8000f74:	4b6b      	ldr	r3, [pc, #428]	@ (8001124 <main+0x2f0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <main+0x2f0>)
 8000f7e:	701a      	strb	r2, [r3, #0]

	      	    	    	  PCA9685_SetServoAngle(6, c*10);
 8000f80:	4b68      	ldr	r3, [pc, #416]	@ (8001124 <main+0x2f0>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdb6 	bl	8000b00 <__aeabi_i2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4619      	mov	r1, r3
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f7ff ff09 	bl	8000db0 <PCA9685_SetServoAngle>

	      	    	      }
	      	    if(RX1_Char == '6')
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001114 <main+0x2e0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b36      	cmp	r3, #54	@ 0x36
 8000fa4:	d114      	bne.n	8000fd0 <main+0x19c>
	      	      {

	      	     c--;
 8000fa6:	4b5f      	ldr	r3, [pc, #380]	@ (8001124 <main+0x2f0>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <main+0x2f0>)
 8000fb0:	701a      	strb	r2, [r3, #0]
	      	      PCA9685_SetServoAngle(6, c*10);
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001124 <main+0x2f0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fd9d 	bl	8000b00 <__aeabi_i2f>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f7ff fef0 	bl	8000db0 <PCA9685_SetServoAngle>

	      	       }
	      	     HAL_Delay(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f000 fb33 	bl	800163c <HAL_Delay>

	      	    if(RX1_Char == '8')
 8000fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8001114 <main+0x2e0>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b38      	cmp	r3, #56	@ 0x38
 8000fdc:	d114      	bne.n	8001008 <main+0x1d4>
	      	       {  d++;
 8000fde:	4b52      	ldr	r3, [pc, #328]	@ (8001128 <main+0x2f4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b50      	ldr	r3, [pc, #320]	@ (8001128 <main+0x2f4>)
 8000fe8:	701a      	strb	r2, [r3, #0]

	      	    	PCA9685_SetServoAngle(8, d*10);
 8000fea:	4b4f      	ldr	r3, [pc, #316]	@ (8001128 <main+0x2f4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fd81 	bl	8000b00 <__aeabi_i2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4619      	mov	r1, r3
 8001002:	2008      	movs	r0, #8
 8001004:	f7ff fed4 	bl	8000db0 <PCA9685_SetServoAngle>
	      	    	}
	      	    	 if(RX1_Char == '7')
 8001008:	4b42      	ldr	r3, [pc, #264]	@ (8001114 <main+0x2e0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b37      	cmp	r3, #55	@ 0x37
 800100e:	d114      	bne.n	800103a <main+0x206>
	      	    	    {
	      	    		 d--;
 8001010:	4b45      	ldr	r3, [pc, #276]	@ (8001128 <main+0x2f4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <main+0x2f4>)
 800101a:	701a      	strb	r2, [r3, #0]
	      	    	     PCA9685_SetServoAngle(8, d*10);
 800101c:	4b42      	ldr	r3, [pc, #264]	@ (8001128 <main+0x2f4>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd68 	bl	8000b00 <__aeabi_i2f>
 8001030:	4603      	mov	r3, r0
 8001032:	4619      	mov	r1, r3
 8001034:	2008      	movs	r0, #8
 8001036:	f7ff febb 	bl	8000db0 <PCA9685_SetServoAngle>

	      	    	     }
	      	    	     HAL_Delay(10);
 800103a:	200a      	movs	r0, #10
 800103c:	f000 fafe 	bl	800163c <HAL_Delay>


	      	    	    if(RX1_Char == '9')
 8001040:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <main+0x2e0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b39      	cmp	r3, #57	@ 0x39
 8001046:	d114      	bne.n	8001072 <main+0x23e>
	      	    	    {  e++;
 8001048:	4b38      	ldr	r3, [pc, #224]	@ (800112c <main+0x2f8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b36      	ldr	r3, [pc, #216]	@ (800112c <main+0x2f8>)
 8001052:	701a      	strb	r2, [r3, #0]

	      	    	     PCA9685_SetServoAngle(10, e*10);
 8001054:	4b35      	ldr	r3, [pc, #212]	@ (800112c <main+0x2f8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fd4c 	bl	8000b00 <__aeabi_i2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4619      	mov	r1, r3
 800106c:	200a      	movs	r0, #10
 800106e:	f7ff fe9f 	bl	8000db0 <PCA9685_SetServoAngle>

	      	    	     }
	      	          if(RX1_Char == '*')
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <main+0x2e0>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b2a      	cmp	r3, #42	@ 0x2a
 8001078:	d114      	bne.n	80010a4 <main+0x270>
	      	          {
	      	    	    e--;
 800107a:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <main+0x2f8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3b01      	subs	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <main+0x2f8>)
 8001084:	701a      	strb	r2, [r3, #0]
	      	    	    PCA9685_SetServoAngle(10, e*10);
 8001086:	4b29      	ldr	r3, [pc, #164]	@ (800112c <main+0x2f8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fd33 	bl	8000b00 <__aeabi_i2f>
 800109a:	4603      	mov	r3, r0
 800109c:	4619      	mov	r1, r3
 800109e:	200a      	movs	r0, #10
 80010a0:	f7ff fe86 	bl	8000db0 <PCA9685_SetServoAngle>
	      	    	   }
	      	    	     HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 fac9 	bl	800163c <HAL_Delay>

	      	    	   if(RX1_Char == '+')
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <main+0x2e0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80010b0:	d113      	bne.n	80010da <main+0x2a6>
	      	    	   	    {  f++;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <main+0x2fc>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <main+0x2fc>)
 80010bc:	701a      	strb	r2, [r3, #0]

	      	    	   	     PCA9685_SetServoAngle(13, f*3);
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <main+0x2fc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd18 	bl	8000b00 <__aeabi_i2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	200d      	movs	r0, #13
 80010d6:	f7ff fe6b 	bl	8000db0 <PCA9685_SetServoAngle>
	      	    	   	 }
	      	    	   	     if(RX1_Char == '-')
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <main+0x2e0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b2d      	cmp	r3, #45	@ 0x2d
 80010e0:	d113      	bne.n	800110a <main+0x2d6>
	      	    	   	   {

	      	    	   	      f--;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <main+0x2fc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <main+0x2fc>)
 80010ec:	701a      	strb	r2, [r3, #0]
	      	    	   	     PCA9685_SetServoAngle(13, f*3);
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <main+0x2fc>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fd00 	bl	8000b00 <__aeabi_i2f>
 8001100:	4603      	mov	r3, r0
 8001102:	4619      	mov	r1, r3
 8001104:	200d      	movs	r0, #13
 8001106:	f7ff fe53 	bl	8000db0 <PCA9685_SetServoAngle>
	      	    	   	    }
	      	    	   	     HAL_Delay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f000 fa96 	bl	800163c <HAL_Delay>
	      if(RX1_Char == '1')
 8001110:	e6c2      	b.n	8000e98 <main+0x64>
 8001112:	bf00      	nop
 8001114:	200000c4 	.word	0x200000c4
 8001118:	2000007c 	.word	0x2000007c
 800111c:	200000c5 	.word	0x200000c5
 8001120:	200000c6 	.word	0x200000c6
 8001124:	200000c7 	.word	0x200000c7
 8001128:	200000c8 	.word	0x200000c8
 800112c:	200000c9 	.word	0x200000c9
 8001130:	200000ca 	.word	0x200000ca

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	@ 0x40
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2228      	movs	r2, #40	@ 0x28
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fff8 	bl	8004138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001170:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001172:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fe43 	bl	8002e08 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001188:	f000 f8ca 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2102      	movs	r1, #2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 f8b0 	bl	800330c <HAL_RCC_ClockConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011b2:	f000 f8b5 	bl	8001320 <Error_Handler>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3740      	adds	r7, #64	@ 0x40
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	@ (8001214 <MX_I2C1_Init+0x54>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <MX_I2C1_Init+0x58>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_I2C1_Init+0x50>)
 80011fe:	f000 fd9d 	bl	8001d3c <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 f88a 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000028 	.word	0x20000028
 8001214:	40005400 	.word	0x40005400
 8001218:	000186a0 	.word	0x000186a0

0800121c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_USART1_UART_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001228:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800122c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_USART1_UART_Init+0x4c>)
 8001254:	f002 f9e8 	bl	8003628 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800125e:	f000 f85f 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000007c 	.word	0x2000007c
 800126c:	40013800 	.word	0x40013800

08001270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <MX_GPIO_Init+0xa8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a23      	ldr	r2, [pc, #140]	@ (8001318 <MX_GPIO_Init+0xa8>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_GPIO_Init+0xa8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_GPIO_Init+0xa8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <MX_GPIO_Init+0xa8>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_GPIO_Init+0xa8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_GPIO_Init+0xa8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <MX_GPIO_Init+0xa8>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_GPIO_Init+0xa8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80012d2:	4812      	ldr	r0, [pc, #72]	@ (800131c <MX_GPIO_Init+0xac>)
 80012d4:	f000 fd1a 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	480a      	ldr	r0, [pc, #40]	@ (800131c <MX_GPIO_Init+0xac>)
 80012f2:	f000 fb87 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_GPIO_Init+0xac>)
 800130c:	f000 fb7a 	bl	8001a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000
 800131c:	40010c00 	.word	0x40010c00

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <Error_Handler+0x8>

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_MspInit+0x5c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <HAL_MspInit+0x5c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_MspInit+0x5c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <HAL_MspInit+0x5c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_MspInit+0x60>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <HAL_MspInit+0x60>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000

08001390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a15      	ldr	r2, [pc, #84]	@ (8001400 <HAL_I2C_MspInit+0x70>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d123      	bne.n	80013f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_I2C_MspInit+0x74>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <HAL_I2C_MspInit+0x74>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_I2C_MspInit+0x74>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c8:	23c0      	movs	r3, #192	@ 0xc0
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013cc:	2312      	movs	r3, #18
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <HAL_I2C_MspInit+0x78>)
 80013dc:	f000 fb12 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <HAL_I2C_MspInit+0x74>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	4a07      	ldr	r2, [pc, #28]	@ (8001404 <HAL_I2C_MspInit+0x74>)
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ea:	61d3      	str	r3, [r2, #28]
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_I2C_MspInit+0x74>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40005400 	.word	0x40005400
 8001404:	40021000 	.word	0x40021000
 8001408:	40010c00 	.word	0x40010c00

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <HAL_UART_MspInit+0x9c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d139      	bne.n	80014a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1e      	ldr	r2, [pc, #120]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a18      	ldr	r2, [pc, #96]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_UART_MspInit+0xa0>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	480f      	ldr	r0, [pc, #60]	@ (80014b0 <HAL_UART_MspInit+0xa4>)
 8001472:	f000 fac7 	bl	8001a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <HAL_UART_MspInit+0xa4>)
 800148c:	f000 faba 	bl	8001a04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2025      	movs	r0, #37	@ 0x25
 8001496:	f000 f9cc 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800149a:	2025      	movs	r0, #37	@ 0x25
 800149c:	f000 f9e5 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010800 	.word	0x40010800

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <NMI_Handler+0x4>

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <UsageFault_Handler+0x4>

080014dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f87e 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <USART1_IRQHandler+0x10>)
 8001512:	f002 f8ff 	bl	8003714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000007c 	.word	0x2000007c

08001520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800152c:	f7ff fff8 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480b      	ldr	r0, [pc, #44]	@ (8001560 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001532:	490c      	ldr	r1, [pc, #48]	@ (8001564 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001534:	4a0c      	ldr	r2, [pc, #48]	@ (8001568 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a09      	ldr	r2, [pc, #36]	@ (800156c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001548:	4c09      	ldr	r4, [pc, #36]	@ (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001556:	f002 fdf7 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155a:	f7ff fc6b 	bl	8000e34 <main>
  bx lr
 800155e:	4770      	bx	lr
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001568:	080041dc 	.word	0x080041dc
  ldr r2, =_sbss
 800156c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001570:	200000d0 	.word	0x200000d0

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <HAL_Init+0x28>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <HAL_Init+0x28>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f947 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff feca 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f95f 	bl	8001886 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f927 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a03      	ldr	r2, [pc, #12]	@ (8001624 <HAL_IncTick+0x20>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000008 	.word	0x20000008
 8001624:	200000cc 	.word	0x200000cc

08001628 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	200000cc 	.word	0x200000cc

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fff0 	bl	8001628 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffe0 	bl	8001628 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4906      	ldr	r1, [pc, #24]	@ (800171c <__NVIC_EnableIRQ+0x34>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff90 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff2d 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff42 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff90 	bl	8001774 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5f 	bl	8001720 <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff35 	bl	80016e8 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d008      	beq.n	80018c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2204      	movs	r2, #4
 80018ba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e020      	b.n	800190a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d005      	beq.n	8001938 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e051      	b.n	80019dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020e 	bic.w	r2, r2, #14
 8001946:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a22      	ldr	r2, [pc, #136]	@ (80019e8 <HAL_DMA_Abort_IT+0xd4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d029      	beq.n	80019b6 <HAL_DMA_Abort_IT+0xa2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a21      	ldr	r2, [pc, #132]	@ (80019ec <HAL_DMA_Abort_IT+0xd8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d022      	beq.n	80019b2 <HAL_DMA_Abort_IT+0x9e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1f      	ldr	r2, [pc, #124]	@ (80019f0 <HAL_DMA_Abort_IT+0xdc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01a      	beq.n	80019ac <HAL_DMA_Abort_IT+0x98>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1e      	ldr	r2, [pc, #120]	@ (80019f4 <HAL_DMA_Abort_IT+0xe0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d012      	beq.n	80019a6 <HAL_DMA_Abort_IT+0x92>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <HAL_DMA_Abort_IT+0xe4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00a      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x8c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <HAL_DMA_Abort_IT+0xe8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <HAL_DMA_Abort_IT+0x86>
 8001994:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001998:	e00e      	b.n	80019b8 <HAL_DMA_Abort_IT+0xa4>
 800199a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800199e:	e00b      	b.n	80019b8 <HAL_DMA_Abort_IT+0xa4>
 80019a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a4:	e008      	b.n	80019b8 <HAL_DMA_Abort_IT+0xa4>
 80019a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019aa:	e005      	b.n	80019b8 <HAL_DMA_Abort_IT+0xa4>
 80019ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b0:	e002      	b.n	80019b8 <HAL_DMA_Abort_IT+0xa4>
 80019b2:	2310      	movs	r3, #16
 80019b4:	e000      	b.n	80019b8 <HAL_DMA_Abort_IT+0xa4>
 80019b6:	2301      	movs	r3, #1
 80019b8:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <HAL_DMA_Abort_IT+0xec>)
 80019ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
    } 
  }
  return status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020008 	.word	0x40020008
 80019ec:	4002001c 	.word	0x4002001c
 80019f0:	40020030 	.word	0x40020030
 80019f4:	40020044 	.word	0x40020044
 80019f8:	40020058 	.word	0x40020058
 80019fc:	4002006c 	.word	0x4002006c
 8001a00:	40020000 	.word	0x40020000

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b08b      	sub	sp, #44	@ 0x2c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e169      	b.n	8001cec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8158 	bne.w	8001ce6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a9a      	ldr	r2, [pc, #616]	@ (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d05e      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a40:	4a98      	ldr	r2, [pc, #608]	@ (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d875      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a46:	4a98      	ldr	r2, [pc, #608]	@ (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d058      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a4c:	4a96      	ldr	r2, [pc, #600]	@ (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d86f      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a52:	4a96      	ldr	r2, [pc, #600]	@ (8001cac <HAL_GPIO_Init+0x2a8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d052      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a58:	4a94      	ldr	r2, [pc, #592]	@ (8001cac <HAL_GPIO_Init+0x2a8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d869      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a5e:	4a94      	ldr	r2, [pc, #592]	@ (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d04c      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a64:	4a92      	ldr	r2, [pc, #584]	@ (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d863      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a6a:	4a92      	ldr	r2, [pc, #584]	@ (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d046      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a70:	4a90      	ldr	r2, [pc, #576]	@ (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d85d      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d82a      	bhi.n	8001ad0 <HAL_GPIO_Init+0xcc>
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d859      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a84 <HAL_GPIO_Init+0x80>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001aff 	.word	0x08001aff
 8001a88:	08001ad9 	.word	0x08001ad9
 8001a8c:	08001aeb 	.word	0x08001aeb
 8001a90:	08001b2d 	.word	0x08001b2d
 8001a94:	08001b33 	.word	0x08001b33
 8001a98:	08001b33 	.word	0x08001b33
 8001a9c:	08001b33 	.word	0x08001b33
 8001aa0:	08001b33 	.word	0x08001b33
 8001aa4:	08001b33 	.word	0x08001b33
 8001aa8:	08001b33 	.word	0x08001b33
 8001aac:	08001b33 	.word	0x08001b33
 8001ab0:	08001b33 	.word	0x08001b33
 8001ab4:	08001b33 	.word	0x08001b33
 8001ab8:	08001b33 	.word	0x08001b33
 8001abc:	08001b33 	.word	0x08001b33
 8001ac0:	08001b33 	.word	0x08001b33
 8001ac4:	08001b33 	.word	0x08001b33
 8001ac8:	08001ae1 	.word	0x08001ae1
 8001acc:	08001af5 	.word	0x08001af5
 8001ad0:	4a79      	ldr	r2, [pc, #484]	@ (8001cb8 <HAL_GPIO_Init+0x2b4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad6:	e02c      	b.n	8001b32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e029      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e024      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	3308      	adds	r3, #8
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e01f      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	330c      	adds	r3, #12
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e01a      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b06:	2304      	movs	r3, #4
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e013      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	611a      	str	r2, [r3, #16]
          break;
 8001b1e:	e009      	b.n	8001b34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	615a      	str	r2, [r3, #20]
          break;
 8001b2a:	e003      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          break;
 8001b32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	@ 0xff
 8001b38:	d801      	bhi.n	8001b3e <HAL_GPIO_Init+0x13a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	e001      	b.n	8001b42 <HAL_GPIO_Init+0x13e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2bff      	cmp	r3, #255	@ 0xff
 8001b48:	d802      	bhi.n	8001b50 <HAL_GPIO_Init+0x14c>
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x152>
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	3b08      	subs	r3, #8
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80b1 	beq.w	8001ce6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b84:	4b4d      	ldr	r3, [pc, #308]	@ (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a4c      	ldr	r2, [pc, #304]	@ (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b9c:	4a48      	ldr	r2, [pc, #288]	@ (8001cc0 <HAL_GPIO_Init+0x2bc>)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a40      	ldr	r2, [pc, #256]	@ (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_GPIO_Init+0x1ec>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3f      	ldr	r2, [pc, #252]	@ (8001cc8 <HAL_GPIO_Init+0x2c4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00d      	beq.n	8001bec <HAL_GPIO_Init+0x1e8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8001ccc <HAL_GPIO_Init+0x2c8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <HAL_GPIO_Init+0x1e4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd0 <HAL_GPIO_Init+0x2cc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_GPIO_Init+0x1e0>
 8001be0:	2303      	movs	r3, #3
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x1ee>
 8001be4:	2304      	movs	r3, #4
 8001be6:	e004      	b.n	8001bf2 <HAL_GPIO_Init+0x1ee>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x1ee>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_GPIO_Init+0x1ee>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf4:	f002 0203 	and.w	r2, r2, #3
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	4093      	lsls	r3, r2
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c02:	492f      	ldr	r1, [pc, #188]	@ (8001cc0 <HAL_GPIO_Init+0x2bc>)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	492c      	ldr	r1, [pc, #176]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4928      	ldr	r1, [pc, #160]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c44:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	4922      	ldr	r1, [pc, #136]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	491e      	ldr	r1, [pc, #120]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4918      	ldr	r1, [pc, #96]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4914      	ldr	r1, [pc, #80]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d021      	beq.n	8001cd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	490e      	ldr	r1, [pc, #56]	@ (8001cd4 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e021      	b.n	8001ce6 <HAL_GPIO_Init+0x2e2>
 8001ca2:	bf00      	nop
 8001ca4:	10320000 	.word	0x10320000
 8001ca8:	10310000 	.word	0x10310000
 8001cac:	10220000 	.word	0x10220000
 8001cb0:	10210000 	.word	0x10210000
 8001cb4:	10120000 	.word	0x10120000
 8001cb8:	10110000 	.word	0x10110000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40010c00 	.word	0x40010c00
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40011400 	.word	0x40011400
 8001cd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_GPIO_Init+0x304>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	4909      	ldr	r1, [pc, #36]	@ (8001d08 <HAL_GPIO_Init+0x304>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f47f ae8e 	bne.w	8001a18 <HAL_GPIO_Init+0x14>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	372c      	adds	r7, #44	@ 0x2c
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e12b      	b.n	8001fa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fb14 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	@ 0x24
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da0:	f001 fbfc 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a81      	ldr	r2, [pc, #516]	@ (8001fb0 <HAL_I2C_Init+0x274>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d807      	bhi.n	8001dc0 <HAL_I2C_Init+0x84>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a80      	ldr	r2, [pc, #512]	@ (8001fb4 <HAL_I2C_Init+0x278>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e006      	b.n	8001dce <HAL_I2C_Init+0x92>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fb8 <HAL_I2C_Init+0x27c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0e7      	b.n	8001fa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a78      	ldr	r2, [pc, #480]	@ (8001fbc <HAL_I2C_Init+0x280>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0c9b      	lsrs	r3, r3, #18
 8001de0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb0 <HAL_I2C_Init+0x274>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d802      	bhi.n	8001e10 <HAL_I2C_Init+0xd4>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	e009      	b.n	8001e24 <HAL_I2C_Init+0xe8>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	4a69      	ldr	r2, [pc, #420]	@ (8001fc0 <HAL_I2C_Init+0x284>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	3301      	adds	r3, #1
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	495c      	ldr	r1, [pc, #368]	@ (8001fb0 <HAL_I2C_Init+0x274>)
 8001e40:	428b      	cmp	r3, r1
 8001e42:	d819      	bhi.n	8001e78 <HAL_I2C_Init+0x13c>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e59      	subs	r1, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e52:	1c59      	adds	r1, r3, #1
 8001e54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e58:	400b      	ands	r3, r1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_I2C_Init+0x138>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1e59      	subs	r1, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e72:	e051      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e04f      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <HAL_I2C_Init+0x168>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e58      	subs	r0, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e012      	b.n	8001eca <HAL_I2C_Init+0x18e>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	0099      	lsls	r1, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Init+0x196>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e022      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_I2C_Init+0x1bc>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e58      	subs	r0, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef6:	e00f      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	0099      	lsls	r1, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6809      	ldr	r1, [r1, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6911      	ldr	r1, [r2, #16]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68d2      	ldr	r2, [r2, #12]
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	000186a0 	.word	0x000186a0
 8001fb4:	001e847f 	.word	0x001e847f
 8001fb8:	003d08ff 	.word	0x003d08ff
 8001fbc:	431bde83 	.word	0x431bde83
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	4608      	mov	r0, r1
 8001fce:	4611      	mov	r1, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	817b      	strh	r3, [r7, #10]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	813b      	strh	r3, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fde:	f7ff fb23 	bl	8001628 <HAL_GetTick>
 8001fe2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	f040 80d9 	bne.w	80021a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2319      	movs	r3, #25
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	496d      	ldr	r1, [pc, #436]	@ (80021b0 <HAL_I2C_Mem_Write+0x1ec>)
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fccd 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
 800200a:	e0cc      	b.n	80021a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2C_Mem_Write+0x56>
 8002016:	2302      	movs	r3, #2
 8002018:	e0c5      	b.n	80021a6 <HAL_I2C_Mem_Write+0x1e2>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d007      	beq.n	8002040 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800204e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2221      	movs	r2, #33	@ 0x21
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a3a      	ldr	r2, [r7, #32]
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a4d      	ldr	r2, [pc, #308]	@ (80021b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002080:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002082:	88f8      	ldrh	r0, [r7, #6]
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	8979      	ldrh	r1, [r7, #10]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4603      	mov	r3, r0
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fb04 	bl	80026a0 <I2C_RequestMemoryWrite>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d052      	beq.n	8002144 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e081      	b.n	80021a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 fd92 	bl	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d107      	bne.n	80020ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e06b      	b.n	80021a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	781a      	ldrb	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_I2C_Mem_Write+0x180>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d017      	beq.n	8002144 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1aa      	bne.n	80020a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fd85 	bl	8002c60 <I2C_WaitOnBTFFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	2b04      	cmp	r3, #4
 8002162:	d107      	bne.n	8002174 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002172:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e016      	b.n	80021a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	00100002 	.word	0x00100002
 80021b4:	ffff0000 	.word	0xffff0000

080021b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	460b      	mov	r3, r1
 80021cc:	813b      	strh	r3, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021d6:	f7ff fa27 	bl	8001628 <HAL_GetTick>
 80021da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	f040 8250 	bne.w	800268a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2319      	movs	r3, #25
 80021f0:	2201      	movs	r2, #1
 80021f2:	4982      	ldr	r1, [pc, #520]	@ (80023fc <HAL_I2C_Mem_Read+0x244>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fbd1 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	e243      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Mem_Read+0x5a>
 800220e:	2302      	movs	r3, #2
 8002210:	e23c      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002246:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2222      	movs	r2, #34	@ 0x22
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2240      	movs	r2, #64	@ 0x40
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002268:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a62      	ldr	r2, [pc, #392]	@ (8002400 <HAL_I2C_Mem_Read+0x248>)
 8002278:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227a:	88f8      	ldrh	r0, [r7, #6]
 800227c:	893a      	ldrh	r2, [r7, #8]
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa9e 	bl	80027cc <I2C_RequestMemoryRead>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e1f8      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d113      	bne.n	80022ca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e1cc      	b.n	8002664 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11e      	bne.n	8002310 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022e2:	b672      	cpsid	i
}
 80022e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800230c:	b662      	cpsie	i
}
 800230e:	e035      	b.n	800237c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	2b02      	cmp	r3, #2
 8002316:	d11e      	bne.n	8002356 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002328:	b672      	cpsid	i
}
 800232a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002352:	b662      	cpsie	i
}
 8002354:	e012      	b.n	800237c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002364:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800237c:	e172      	b.n	8002664 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002382:	2b03      	cmp	r3, #3
 8002384:	f200 811f 	bhi.w	80025c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	2b01      	cmp	r3, #1
 800238e:	d123      	bne.n	80023d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fcab 	bl	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e173      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023d6:	e145      	b.n	8002664 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d152      	bne.n	8002486 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	2200      	movs	r2, #0
 80023e8:	4906      	ldr	r1, [pc, #24]	@ (8002404 <HAL_I2C_Mem_Read+0x24c>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fad6 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e148      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
 80023fa:	bf00      	nop
 80023fc:	00100002 	.word	0x00100002
 8002400:	ffff0000 	.word	0xffff0000
 8002404:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800244e:	b662      	cpsie	i
}
 8002450:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002484:	e0ee      	b.n	8002664 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248c:	2200      	movs	r2, #0
 800248e:	4981      	ldr	r1, [pc, #516]	@ (8002694 <HAL_I2C_Mem_Read+0x4dc>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fa83 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0f5      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002698 <HAL_I2C_Mem_Read+0x4e0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	4a6b      	ldr	r2, [pc, #428]	@ (800269c <HAL_I2C_Mem_Read+0x4e4>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a1a      	lsrs	r2, r3, #8
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00da      	lsls	r2, r3, #3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	3b01      	subs	r3, #1
 8002504:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d118      	bne.n	800253e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f043 0220 	orr.w	r2, r3, #32
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800252e:	b662      	cpsie	i
}
 8002530:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0a6      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d1d9      	bne.n	8002500 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800258e:	b662      	cpsie	i
}
 8002590:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025c4:	e04e      	b.n	8002664 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fb90 	bl	8002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e058      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d124      	bne.n	8002664 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002630:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	2b00      	cmp	r3, #0
 800266a:	f47f ae88 	bne.w	800237e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3728      	adds	r7, #40	@ 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	00010004 	.word	0x00010004
 8002698:	20000000 	.word	0x20000000
 800269c:	14f8b589 	.word	0x14f8b589

080026a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	817b      	strh	r3, [r7, #10]
 80026b2:	460b      	mov	r3, r1
 80026b4:	813b      	strh	r3, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f960 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026f0:	d103      	bne.n	80026fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e05f      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800270c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	492d      	ldr	r1, [pc, #180]	@ (80027c8 <I2C_RequestMemoryWrite+0x128>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f9bb 	bl	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e04c      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273c:	6a39      	ldr	r1, [r7, #32]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fa46 	bl	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	2b04      	cmp	r3, #4
 8002750:	d107      	bne.n	8002762 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002760:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e02b      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800276c:	893b      	ldrh	r3, [r7, #8]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	e021      	b.n	80027bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002778:	893b      	ldrh	r3, [r7, #8]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29b      	uxth	r3, r3
 800277e:	b2da      	uxtb	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	6a39      	ldr	r1, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fa20 	bl	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	2b04      	cmp	r3, #4
 800279c:	d107      	bne.n	80027ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e005      	b.n	80027be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027b2:	893b      	ldrh	r3, [r7, #8]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	00010002 	.word	0x00010002

080027cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	460b      	mov	r3, r1
 80027e0:	813b      	strh	r3, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002804:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2200      	movs	r2, #0
 800280e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8c2 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00d      	beq.n	800283a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800282c:	d103      	bne.n	8002836 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e0aa      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002848:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	6a3a      	ldr	r2, [r7, #32]
 800284e:	4952      	ldr	r1, [pc, #328]	@ (8002998 <I2C_RequestMemoryRead+0x1cc>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f91d 	bl	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e097      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	6a39      	ldr	r1, [r7, #32]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f9a8 	bl	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2b04      	cmp	r3, #4
 800288c:	d107      	bne.n	800289e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e076      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028a8:	893b      	ldrh	r3, [r7, #8]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	611a      	str	r2, [r3, #16]
 80028b2:	e021      	b.n	80028f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c4:	6a39      	ldr	r1, [r7, #32]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f982 	bl	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d107      	bne.n	80028ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e050      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ee:	893b      	ldrh	r3, [r7, #8]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fa:	6a39      	ldr	r1, [r7, #32]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f967 	bl	8002bd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00d      	beq.n	8002924 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	2b04      	cmp	r3, #4
 800290e:	d107      	bne.n	8002920 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e035      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002932:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	2200      	movs	r2, #0
 800293c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f82b 	bl	800299c <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00d      	beq.n	8002968 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800295a:	d103      	bne.n	8002964 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e013      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	4906      	ldr	r1, [pc, #24]	@ (8002998 <I2C_RequestMemoryRead+0x1cc>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f886 	bl	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	00010002 	.word	0x00010002

0800299c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ac:	e048      	b.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d044      	beq.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fe fe37 	bl	8001628 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d139      	bne.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10d      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	43da      	mvns	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4013      	ands	r3, r2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	e00c      	b.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x70>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	43da      	mvns	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4013      	ands	r3, r2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d116      	bne.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e023      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	e00c      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d093      	beq.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a9e:	e071      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aae:	d123      	bne.n	8002af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0204 	orr.w	r2, r3, #4
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e067      	b.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d041      	beq.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b00:	f7fe fd92 	bl	8001628 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d302      	bcc.n	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d136      	bne.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e00b      	b.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e021      	b.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10c      	bne.n	8002ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e00b      	b.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f47f af6d 	bne.w	8002aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bdc:	e034      	b.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f8e3 	bl	8002daa <I2C_IsAcknowledgeFailed>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e034      	b.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d028      	beq.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7fe fd17 	bl	8001628 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d11d      	bne.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c16:	2b80      	cmp	r3, #128	@ 0x80
 8002c18:	d016      	beq.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0220 	orr.w	r2, r3, #32
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b80      	cmp	r3, #128	@ 0x80
 8002c54:	d1c3      	bne.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c6c:	e034      	b.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f89b 	bl	8002daa <I2C_IsAcknowledgeFailed>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e034      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d028      	beq.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fccf 	bl	8001628 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11d      	bne.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d016      	beq.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e007      	b.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d1c3      	bne.n	8002c6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cfc:	e049      	b.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d119      	bne.n	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0210 	mvn.w	r2, #16
 8002d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e030      	b.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fe fc72 	bl	8001628 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11d      	bne.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b40      	cmp	r3, #64	@ 0x40
 8002d62:	d016      	beq.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b40      	cmp	r3, #64	@ 0x40
 8002d9e:	d1ae      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc0:	d11b      	bne.n	8002dfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e272      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8087 	beq.w	8002f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e28:	4b92      	ldr	r3, [pc, #584]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d00c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e34:	4b8f      	ldr	r3, [pc, #572]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d112      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
 8002e40:	4b8c      	ldr	r3, [pc, #560]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4c:	d10b      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4e:	4b89      	ldr	r3, [pc, #548]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d06c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x12c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d168      	bne.n	8002f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e24c      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x76>
 8002e70:	4b80      	ldr	r3, [pc, #512]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7f      	ldr	r2, [pc, #508]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	e02e      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x98>
 8002e86:	4b7b      	ldr	r3, [pc, #492]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7a      	ldr	r2, [pc, #488]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	4b78      	ldr	r3, [pc, #480]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a77      	ldr	r2, [pc, #476]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e01d      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xbc>
 8002eaa:	4b72      	ldr	r3, [pc, #456]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a71      	ldr	r2, [pc, #452]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6e      	ldr	r2, [pc, #440]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0xd4>
 8002ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b68      	ldr	r3, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a67      	ldr	r2, [pc, #412]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fba0 	bl	8001628 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eec:	f7fe fb9c 	bl	8001628 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	@ 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e200      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b5d      	ldr	r3, [pc, #372]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0xe4>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fb8c 	bl	8001628 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe fb88 	bl	8001628 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	@ 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1ec      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	4b53      	ldr	r3, [pc, #332]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x10c>
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d063      	beq.n	800300a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f42:	4b4c      	ldr	r3, [pc, #304]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f4e:	4b49      	ldr	r3, [pc, #292]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d11c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x18c>
 8002f5a:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x176>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e1c0      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4939      	ldr	r1, [pc, #228]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	e03a      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9c:	4b36      	ldr	r3, [pc, #216]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fb41 	bl	8001628 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002faa:	f7fe fb3d 	bl	8001628 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1a1      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4927      	ldr	r1, [pc, #156]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fde:	4b26      	ldr	r3, [pc, #152]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fb20 	bl	8001628 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fec:	f7fe fb1c 	bl	8001628 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e180      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d03a      	beq.n	800308c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d019      	beq.n	8003052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b17      	ldr	r3, [pc, #92]	@ (800307c <HAL_RCC_OscConfig+0x274>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003024:	f7fe fb00 	bl	8001628 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302c:	f7fe fafc 	bl	8001628 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e160      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <HAL_RCC_OscConfig+0x26c>)
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800304a:	2001      	movs	r0, #1
 800304c:	f000 face 	bl	80035ec <RCC_Delay>
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_RCC_OscConfig+0x274>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003058:	f7fe fae6 	bl	8001628 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305e:	e00f      	b.n	8003080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003060:	f7fe fae2 	bl	8001628 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d908      	bls.n	8003080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e146      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	42420000 	.word	0x42420000
 800307c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b92      	ldr	r3, [pc, #584]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e9      	bne.n	8003060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a6 	beq.w	80031e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b8b      	ldr	r3, [pc, #556]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b88      	ldr	r3, [pc, #544]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a87      	ldr	r2, [pc, #540]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]
 80030b6:	4b85      	ldr	r3, [pc, #532]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b82      	ldr	r3, [pc, #520]	@ (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b7f      	ldr	r3, [pc, #508]	@ (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	@ (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe faa3 	bl	8001628 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe fa9f 	bl	8001628 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b64      	cmp	r3, #100	@ 0x64
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e103      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b75      	ldr	r3, [pc, #468]	@ (80032d0 <HAL_RCC_OscConfig+0x4c8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x312>
 800310c:	4b6f      	ldr	r3, [pc, #444]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a6e      	ldr	r2, [pc, #440]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e02d      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x334>
 8003122:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a69      	ldr	r2, [pc, #420]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6213      	str	r3, [r2, #32]
 800312e:	4b67      	ldr	r3, [pc, #412]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	4a66      	ldr	r2, [pc, #408]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003134:	f023 0304 	bic.w	r3, r3, #4
 8003138:	6213      	str	r3, [r2, #32]
 800313a:	e01c      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x356>
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a60      	ldr	r2, [pc, #384]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	4b5e      	ldr	r3, [pc, #376]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a5d      	ldr	r2, [pc, #372]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e00b      	b.n	8003176 <HAL_RCC_OscConfig+0x36e>
 800315e:	4b5b      	ldr	r3, [pc, #364]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	4a5a      	ldr	r2, [pc, #360]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6213      	str	r3, [r2, #32]
 800316a:	4b58      	ldr	r3, [pc, #352]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a57      	ldr	r2, [pc, #348]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d015      	beq.n	80031aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe fa53 	bl	8001628 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe fa4f 	bl	8001628 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e0b1      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b4b      	ldr	r3, [pc, #300]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCC_OscConfig+0x37e>
 80031a8:	e014      	b.n	80031d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fa3d 	bl	8001628 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe fa39 	bl	8001628 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e09b      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	4b40      	ldr	r3, [pc, #256]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031da:	4b3c      	ldr	r3, [pc, #240]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a3b      	ldr	r2, [pc, #236]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8087 	beq.w	80032fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031f0:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d061      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d146      	bne.n	8003292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003204:	4b33      	ldr	r3, [pc, #204]	@ (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe fa0d 	bl	8001628 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fa09 	bl	8001628 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e06d      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003238:	d108      	bne.n	800324c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4921      	ldr	r1, [pc, #132]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003248:	4313      	orrs	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a19      	ldr	r1, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	430b      	orrs	r3, r1
 800325e:	491b      	ldr	r1, [pc, #108]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	@ (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe f9dd 	bl	8001628 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe f9d9 	bl	8001628 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x46a>
 8003290:	e035      	b.n	80032fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe f9c6 	bl	8001628 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe f9c2 	bl	8001628 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e026      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x498>
 80032be:	e01e      	b.n	80032fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e019      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_OscConfig+0x500>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0d0      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b6a      	ldr	r3, [pc, #424]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d910      	bls.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b67      	ldr	r3, [pc, #412]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	4965      	ldr	r1, [pc, #404]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a58      	ldr	r2, [pc, #352]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800338a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d040      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e073      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3d      	ldr	r3, [pc, #244]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e06b      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b39      	ldr	r3, [pc, #228]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4936      	ldr	r1, [pc, #216]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe f914 	bl	8001628 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe f910 	bl	8001628 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e053      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d210      	bcs.n	800345c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4922      	ldr	r1, [pc, #136]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1cc>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_ClockConfig+0x1d0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f872 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40022000 	.word	0x40022000
 80034d0:	40021000 	.word	0x40021000
 80034d4:	080041a8 	.word	0x080041a8
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x94>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b04      	cmp	r3, #4
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x30>
 800350a:	2b08      	cmp	r3, #8
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x36>
 800350e:	e027      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003510:	4b19      	ldr	r3, [pc, #100]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003512:	613b      	str	r3, [r7, #16]
      break;
 8003514:	e027      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0c9b      	lsrs	r3, r3, #18
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a17      	ldr	r2, [pc, #92]	@ (800357c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x94>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	0c5b      	lsrs	r3, r3, #17
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800353a:	5cd3      	ldrb	r3, [r2, r3]
 800353c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a0d      	ldr	r2, [pc, #52]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003542:	fb03 f202 	mul.w	r2, r3, r2
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e004      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0c      	ldr	r2, [pc, #48]	@ (8003584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	613b      	str	r3, [r7, #16]
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x98>)
 8003562:	613b      	str	r3, [r7, #16]
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	693b      	ldr	r3, [r7, #16]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	080041c0 	.word	0x080041c0
 8003580:	080041d0 	.word	0x080041d0
 8003584:	003d0900 	.word	0x003d0900

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800358c:	4b02      	ldr	r3, [pc, #8]	@ (8003598 <HAL_RCC_GetHCLKFreq+0x10>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	20000000 	.word	0x20000000

0800359c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a0:	f7ff fff2 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4903      	ldr	r1, [pc, #12]	@ (80035c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b2:	5ccb      	ldrb	r3, [r1, r3]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	080041b8 	.word	0x080041b8

080035c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c8:	f7ff ffde 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0adb      	lsrs	r3, r3, #11
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	4903      	ldr	r1, [pc, #12]	@ (80035e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	080041b8 	.word	0x080041b8

080035ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <RCC_Delay+0x34>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <RCC_Delay+0x38>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a5b      	lsrs	r3, r3, #9
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003608:	bf00      	nop
  }
  while (Delay --);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e5a      	subs	r2, r3, #1
 800360e:	60fa      	str	r2, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <RCC_Delay+0x1c>
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	20000000 	.word	0x20000000
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e042      	b.n	80036c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fedc 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800366a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fcd5 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d112      	bne.n	8003708 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Receive_IT+0x26>
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00b      	b.n	800370a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fab7 	bl	8003c72 <UART_Start_Receive_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	e000      	b.n	800370a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b0ba      	sub	sp, #232	@ 0xe8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_UART_IRQHandler+0x66>
 8003766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fb93 	bl	8003e9e <UART_Receive_IT>
      return;
 8003778:	e25b      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800377a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 80de 	beq.w	8003940 <HAL_UART_IRQHandler+0x22c>
 8003784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003794:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80d1 	beq.w	8003940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_UART_IRQHandler+0xae>
 80037aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <HAL_UART_IRQHandler+0xd2>
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0202 	orr.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_UART_IRQHandler+0xf6>
 80037f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d011      	beq.n	800383a <HAL_UART_IRQHandler+0x126>
 8003816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f043 0208 	orr.w	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 81f2 	beq.w	8003c28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_UART_IRQHandler+0x14e>
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fb1e 	bl	8003e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <HAL_UART_IRQHandler+0x17a>
 8003886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04f      	beq.n	800392e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa28 	bl	8003ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d041      	beq.n	8003926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3314      	adds	r3, #20
 80038ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1d9      	bne.n	80038a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003af4 <HAL_UART_IRQHandler+0x3e0>)
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe f806 	bl	8001914 <HAL_DMA_Abort_IT>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003918:	4610      	mov	r0, r2
 800391a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	e00e      	b.n	800393c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f993 	bl	8003c4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00a      	b.n	800393c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f98f 	bl	8003c4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e006      	b.n	800393c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f98b 	bl	8003c4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800393a:	e175      	b.n	8003c28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	bf00      	nop
    return;
 800393e:	e173      	b.n	8003c28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 814f 	bne.w	8003be8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8148 	beq.w	8003be8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8141 	beq.w	8003be8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80b6 	beq.w	8003af8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8145 	beq.w	8003c2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f080 813e 	bcs.w	8003c2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f000 8088 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1d9      	bne.n	80039c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e1      	bne.n	8003a10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3314      	adds	r3, #20
 8003a52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e3      	bne.n	8003a4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa4:	f023 0310 	bic.w	r3, r3, #16
 8003aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ab6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ab8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e3      	bne.n	8003a92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fee5 	bl	800189e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8b6 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af0:	e09c      	b.n	8003c2c <HAL_UART_IRQHandler+0x518>
 8003af2:	bf00      	nop
 8003af4:	08003da9 	.word	0x08003da9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 808e 	beq.w	8003c30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8089 	beq.w	8003c30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b42:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	623b      	str	r3, [r7, #32]
   return(result);
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0310 	bic.w	r3, r3, #16
 8003bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003bc0:	61fa      	str	r2, [r7, #28]
 8003bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f83b 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003be6:	e023      	b.n	8003c30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_UART_IRQHandler+0x4f4>
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8e5 	bl	8003dd0 <UART_Transmit_IT>
    return;
 8003c06:	e014      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00e      	beq.n	8003c32 <HAL_UART_IRQHandler+0x51e>
 8003c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f924 	bl	8003e6e <UART_EndTransmit_IT>
    return;
 8003c26:	e004      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c30:	bf00      	nop
  }
}
 8003c32:	37e8      	adds	r7, #232	@ 0xe8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2222      	movs	r2, #34	@ 0x22
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0220 	orr.w	r2, r2, #32
 8003cd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b095      	sub	sp, #84	@ 0x54
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d119      	bne.n	8003d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d7c:	61ba      	str	r2, [r7, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6979      	ldr	r1, [r7, #20]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d9e:	bf00      	nop
 8003da0:	3754      	adds	r7, #84	@ 0x54
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ff41 	bl	8003c4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b21      	cmp	r3, #33	@ 0x21
 8003de2:	d13e      	bne.n	8003e62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dec:	d114      	bne.n	8003e18 <UART_Transmit_IT+0x48>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d110      	bne.n	8003e18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	e008      	b.n	8003e2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6211      	str	r1, [r2, #32]
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4619      	mov	r1, r3
 8003e38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fed2 	bl	8003c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08c      	sub	sp, #48	@ 0x30
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b22      	cmp	r3, #34	@ 0x22
 8003eb0:	f040 80ae 	bne.w	8004010 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d117      	bne.n	8003eee <UART_Receive_IT+0x50>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eec:	e026      	b.n	8003f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f00:	d007      	beq.n	8003f12 <UART_Receive_IT+0x74>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <UART_Receive_IT+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e008      	b.n	8003f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15d      	bne.n	800400c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0220 	bic.w	r2, r2, #32
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d135      	bne.n	8004002 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	613b      	str	r3, [r7, #16]
   return(result);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 0310 	bic.w	r3, r3, #16
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbc:	623a      	str	r2, [r7, #32]
 8003fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d10a      	bne.n	8003ff4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fe2e 	bl	8003c5c <HAL_UARTEx_RxEventCallback>
 8004000:	e002      	b.n	8004008 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7fc fdf0 	bl	8000be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e002      	b.n	8004012 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3730      	adds	r7, #48	@ 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004056:	f023 030c 	bic.w	r3, r3, #12
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	430b      	orrs	r3, r1
 8004062:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <UART_SetConfig+0x114>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7ff fa9e 	bl	80035c4 <HAL_RCC_GetPCLK2Freq>
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	e002      	b.n	8004092 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7ff fa86 	bl	800359c <HAL_RCC_GetPCLK1Freq>
 8004090:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009a      	lsls	r2, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	4a22      	ldr	r2, [pc, #136]	@ (8004134 <UART_SetConfig+0x118>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	0119      	lsls	r1, r3, #4
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009a      	lsls	r2, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004134 <UART_SetConfig+0x118>)
 80040ca:	fba3 0302 	umull	r0, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2064      	movs	r0, #100	@ 0x64
 80040d2:	fb00 f303 	mul.w	r3, r0, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	@ 0x32
 80040dc:	4a15      	ldr	r2, [pc, #84]	@ (8004134 <UART_SetConfig+0x118>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040e8:	4419      	add	r1, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004100:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <UART_SetConfig+0x118>)
 8004102:	fba3 0302 	umull	r0, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2064      	movs	r0, #100	@ 0x64
 800410a:	fb00 f303 	mul.w	r3, r0, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	@ 0x32
 8004114:	4a07      	ldr	r2, [pc, #28]	@ (8004134 <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	440a      	add	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40013800 	.word	0x40013800
 8004134:	51eb851f 	.word	0x51eb851f

08004138 <memset>:
 8004138:	4603      	mov	r3, r0
 800413a:	4402      	add	r2, r0
 800413c:	4293      	cmp	r3, r2
 800413e:	d100      	bne.n	8004142 <memset+0xa>
 8004140:	4770      	bx	lr
 8004142:	f803 1b01 	strb.w	r1, [r3], #1
 8004146:	e7f9      	b.n	800413c <memset+0x4>

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	2600      	movs	r6, #0
 800414c:	4d0c      	ldr	r5, [pc, #48]	@ (8004180 <__libc_init_array+0x38>)
 800414e:	4c0d      	ldr	r4, [pc, #52]	@ (8004184 <__libc_init_array+0x3c>)
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	f000 f81a 	bl	8004190 <_init>
 800415c:	2600      	movs	r6, #0
 800415e:	4d0a      	ldr	r5, [pc, #40]	@ (8004188 <__libc_init_array+0x40>)
 8004160:	4c0a      	ldr	r4, [pc, #40]	@ (800418c <__libc_init_array+0x44>)
 8004162:	1b64      	subs	r4, r4, r5
 8004164:	10a4      	asrs	r4, r4, #2
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	080041d4 	.word	0x080041d4
 8004184:	080041d4 	.word	0x080041d4
 8004188:	080041d4 	.word	0x080041d4
 800418c:	080041d8 	.word	0x080041d8

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
